import { processTest, populateTransaction } from "../../test.fixture";

const contractName = "AggregationRouterV5";

const testLabel = "swapV5"; // <= Name of the test
const testDirSuffix = "swap_v5"; // <= directory to compare device snapshots to
const testNetwork = "optimism";
const signedPlugin = false;

const contractAddr = "0x1111111254eeb25477b68fb85ed929f73a960582";
const chainID = 10;

// From : https://optimistic.etherscan.io/tx/0x220787d231006343b87d2503ffba8bf5d3a27d2c5981774bb75725f4ad4a8e9d
const inputData = "0x12aa3caf000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba000000000000000000000000420000000000000000000000000000000000000600000000000000000000000094b008aa00579c1307b0ef2c499ad98a8ce58e58000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000003f343211f0487eb43af2e0e773ba012015e6651a00000000000000000000000000000000000000000000000008c12d4babf0040000000000000000000000000000000000000000000000000000000000771f5bc9000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003400000000000000000000000000000000000000003220002f40002aa00029000a0c9e75c480000000000000000090100000000000000000000000000000000000000000000000000026200004f02a0000000000000000000000000000000000000000000000000000000000bcb207fee63c1e501c858a329bf053be78d6239c4a4343b8fbd21472b420000000000000000000000000000000000000600a007e5c0d20000000000000000000000000000000000000000000001ef00013f00004f02a0000000000000000000000000000000000000000000000000000000006a2e76fbee63c1e5001fb3cf6e48f1e7b10213e7b6d87d4c073c7fdb7b420000000000000000000000000000000000000651322b6b093a6c2aba51e078540ad89ed76a0c6716fa0b2c639c533813f4aa9d7837caf62653d097ff85004475d39ecb000000000000000000000000b63aae6c353636d66df13b89ba4425cfe13d10ba0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000276a4000000000000000000000000000000000000000000000000000000006a2f823c00000000000000000000000000000000000000000000000000000000673f74c351201337bedc9d22ecbe766df105c9623922a27963ec7f5c764cbc14f9669b88837ca1490cca17c3160700443df02124000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a25820f0020d6bdbf7894b008aa00579c1307b0ef2c499ad98a8ce58e5800a0f2fa6b6694b008aa00579c1307b0ef2c499ad98a8ce58e580000000000000000000000000000000000000000000000000000000077219c72000000000000000000000000004c16a880a06c4eca2794b008aa00579c1307b0ef2c499ad98a8ce58e581111111254eeb25477b68fb85ed929f73a960582";

const serializedTx = populateTransaction(contractAddr, inputData, chainID);

const devices = [
    {
        name: "nanos",
        label: "Nano S",
        steps: 12, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanox",
        label: "Nano X",
        steps: 8, // <= Define the number of steps for this test case and this device
    },
    {
        name: "nanosp",
        label: "Nano S+",
        steps: 8, // <= Define the number of steps for this test case and this device
    }
];

devices.forEach((device) =>{
        processTest(device, contractName, testLabel, testDirSuffix, "", signedPlugin, serializedTx, testNetwork);
    }
);